{"version":3,"file":"main.6c63ed83cc9b4a0841ef.bundle.js","sources":["webpack:///./src/index.ts"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar AsyncValidator = require(\"async-validator\");\nvar safe_get_1 = require(\"./utils/safe-get\");\nvar map_values_1 = require(\"./utils/map-values\");\nvar omit_1 = require(\"./utils/omit\");\nvar setField = function (state, name, value) {\n    var _a;\n    return Object.assign(state, (_a = {},\n        _a[name] = {\n            value: safe_get_1.get(state, name + \".value\") || value,\n            touched: false,\n            error: []\n        },\n        _a));\n};\nvar useForm = function (intial) {\n    var initialData = intial || {};\n    var _a = react_1.useState({\n        fields: Object.keys(initialData).reduce(function (prev, key) {\n            return setField(prev, key, initialData[key]);\n        }, {}),\n        errors: {},\n    }), state = _a[0], setState = _a[1];\n    var updateField = function (name, data) {\n        if (data === void 0) { data = {}; }\n        var _a;\n        var newState = __assign({}, state, { fields: __assign({}, state.fields, (_a = {}, _a[name] = __assign({}, state.fields[name], data), _a)) });\n        setState(newState);\n        return newState;\n    };\n    var fieldOptions = [];\n    var handleErrors = function (fields, keys, newState) {\n        var errors = Array.isArray(keys) ? keys.reduce(function (prev, key) {\n            var _a;\n            var fieldsError = fields || {};\n            return fieldsError[key] ? __assign({}, prev, (_a = {}, _a[key] = fieldsError[key], _a)) : omit_1.omit(prev, [key]);\n        }, newState.errors) : fields || {};\n        var errorState = __assign({}, newState, { errors: errors });\n        setState(errorState);\n        return errorState;\n    };\n    var innerValidate = function (callback, keys, newState) {\n        if (newState === void 0) { newState = state; }\n        var descriptor = fieldOptions.reduce(function (prev, item) {\n            var _a;\n            var rules = safe_get_1.get(item, 'option.rules');\n            return rules ? Object.assign(prev, (_a = {},\n                _a[item.name] = rules,\n                _a)) : prev;\n        }, {});\n        if (Object.keys(descriptor).length) {\n            var validator = new AsyncValidator(descriptor);\n            var formValue = getFormValue(newState);\n            validator.validate(formValue, function (errors, fields) {\n                var error = handleErrors(fields, keys, newState);\n                if (errors) {\n                    callback && callback(error.errors);\n                }\n                else {\n                    callback && callback();\n                }\n            });\n        }\n        else {\n            callback && callback();\n        }\n    };\n    var getFormValue = function (newState) {\n        if (newState === void 0) { newState = state; }\n        return map_values_1.mapValues(newState.fields, function (field) { return field.value; });\n    };\n    var field = function (name, option) {\n        if (option === void 0) { option = {}; }\n        var trigger = option.trigger;\n        var isBlurTrigger = (trigger || '').toLowerCase() === 'onblur';\n        fieldOptions.push({\n            name: name,\n            option: option\n        });\n        return {\n            get value() {\n                return safe_get_1.get(state, name + \".value\");\n            },\n            onChange: function (event) {\n                var value = event.target ? event.target.value : event;\n                var newState = updateField(name, {\n                    value: value,\n                    touched: true\n                });\n                if (!isBlurTrigger) {\n                    innerValidate(function () { }, [name], newState);\n                }\n            },\n            onBlur: function () {\n                var newState = updateField(name, {\n                    touched: true\n                });\n                if (isBlurTrigger) {\n                    innerValidate(function () { }, [name], newState);\n                }\n            },\n        };\n    };\n    return [\n        {\n            get value() {\n                return getFormValue();\n            },\n            get errors() {\n                return state.errors;\n            },\n            get touched() {\n                return map_values_1.mapValues(state.fields, function (field) { return field.touched; });\n            },\n            validate: function (callback, keys) {\n                return innerValidate(callback, keys);\n            },\n        },\n        field,\n    ];\n};\nexports.default = useForm;\n"],"mappings":"AACA","sourceRoot":""}